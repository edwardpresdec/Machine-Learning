#add the rest of the curves as lines
lines.roc(roc2, col = "red", print.auc = TRUE, print.auc.y = 0.4)
lines.roc(roc3, col = "green", print.auc = TRUE, print.auc.y = 0.3)
lines.roc(roc4, col = "orange", print.auc = TRUE, print.auc.y = 0.2)
lines.roc(roc5, col = "yellow", print.auc = TRUE, print.auc.y = 0.1)
legend_labels = c(
paste("Temperature (AUC =", round(auc1, 4), ")"),
paste("All Features (AUC =", round(auc2, 4), ")"),
paste("Best Subset (AUC =", round(auc3, 4), ")"),
paste("PCA (AUC =", round(auc4, 4), ")"),
paste("RFE (AUC =", round(auc5, 4), ")")
)
#legend
legend("bottomright", legend = legend_labels, col = c("blue", "red", "green", "orange", "yellow"), lwd = 0.5, cex = 0.7)
qda_plot = recordPlot()
levels(uns_trainData$Classes) = make.names(levels(uns_trainData$Classes))
#set the seed
set.seed(123)
#fit the model
knn.fit = train(Classes ~ ., data = uns_trainData, method="knn", tuneLength = 50, trControl = trainControl(method="cv", classProbs = TRUE))
#output key information from the fit
head(knn.fit$results)
knn.fit$bestTune
plot(knn.fit)
#calculate probabilities
knn.prob = predict(knn.fit,uns_testData,type="prob")
#plot ROC curve
roc_curve = suppressMessages(roc(uns_testData$Classes, knn.prob[,2]))
plot(roc_curve, col = "blue", main = "ROC Curve", print.auc = TRUE)
#set the seed
set.seed(123)
#fit the model
knn.fit = train(Classes ~ Ws, data = uns_trainData, method="knn", tuneLength = 50, trControl = trainControl(method="cv", classProbs = TRUE))
#calculate probabilities
knn.prob = predict(knn.fit,uns_testData,type="prob")
#plot ROC curve
roc_curve = suppressMessages(roc(uns_testData$Classes, knn.prob[,2]))
plot(roc_curve, col = "blue", main = "ROC Curve", print.auc = TRUE)
#set the seed
set.seed(123)
#fit the models
knn.fit1 = train(Classes ~ Temperature, data = uns_trainData, method="knn", tuneLength = 50, trControl = trainControl(method="cv", classProbs = TRUE))
knn.fit2 = train(Classes ~ ., data = uns_trainData, method="knn", tuneLength = 50, trControl = trainControl(method="cv", classProbs = TRUE))
knn.fit3 = train(Classes ~ RH + FFMC + DMC + FWI, data = uns_trainData, method="knn", tuneLength = 50, trControl = trainControl(method="cv", classProbs = TRUE))
knn.fit4 = train(Classes ~ BUI + FFMC + DMC + DC, data = uns_trainData, method="knn", tuneLength = 50, trControl = trainControl(method="cv", classProbs = TRUE))
knn.fit5 = train(Classes ~ ISI + FFMC, data = uns_trainData, method="knn", tuneLength = 50, trControl = trainControl(method="cv", classProbs = TRUE))
#predict the values
knn.prob1 = predict(knn.fit1,uns_testData,type="prob")
knn.prob2 = predict(knn.fit2,uns_testData,type="prob")
knn.prob3 = predict(knn.fit3,uns_testData,type="prob")
knn.prob4 = predict(knn.fit4,uns_testData,type="prob")
knn.prob5 = predict(knn.fit5,uns_testData,type="prob")
#compute ROC curves
roc1 = suppressMessages(roc(uns_testData$Classes, knn.prob1[,2]))
roc2 = suppressMessages(roc(uns_testData$Classes, knn.prob2[,2]))
roc3 = suppressMessages(roc(uns_testData$Classes, knn.prob3[,2]))
roc4 = suppressMessages(roc(uns_testData$Classes, knn.prob4[,2]))
roc5 = suppressMessages(roc(uns_testData$Classes, knn.prob5[,2]))
#compute aucs
auc1 = auc(roc1)
auc2 = auc(roc2)
auc3 = auc(roc3)
auc4 = auc(roc4)
auc5 = auc(roc5)
#create a dataframe and store AUC to be used in comparison later
auc1.data = data.frame(
Model = "KNN",
Temperature = auc1,
Entire_Dataset = auc2,
Best_Subset = auc3,
PCA = auc4,
RFE = auc5
)
auc.data = rbind(auc.data,auc1.data)
#plot the first ROC curve
plot.roc(roc1, col = "blue", main = "KNN ROC Curves")
#add the rest of the curves as lines
lines.roc(roc2, col = "red", print.auc = TRUE, print.auc.y = 0.4)
lines.roc(roc3, col = "green", print.auc = TRUE, print.auc.y = 0.3)
lines.roc(roc4, col = "orange", print.auc = TRUE, print.auc.y = 0.2)
lines.roc(roc5, col = "yellow", print.auc = TRUE, print.auc.y = 0.1)
legend_labels = c(
paste("Temperature (AUC =", round(auc1, 4), ")"),
paste("All Features (AUC =", round(auc2, 4), ")"),
paste("Best Subset (AUC =", round(auc3, 4), ")"),
paste("PCA (AUC =", round(auc4, 4), ")"),
paste("RFE (AUC =", round(auc5, 4), ")")
)
#legend
legend("bottomright", legend = legend_labels, col = c("blue", "red", "green", "orange", "yellow"), lwd = 0.5, cex = 0.7)
knn_plot = recordPlot()
#assign labels to each fit
knn.fit1$results$Group <- "Temperature"
knn.fit2$results$Group <- "All Features"
knn.fit3$results$Group <- "Best Subset"
knn.fit4$results$Group <- "PCA"
knn.fit5$results$Group <- "RFE"
#combine the results into a single data frame
combined_results <- bind_rows(knn.fit1$results, knn.fit2$results, knn.fit3$results, knn.fit4$results, knn.fit5$results)
#plot the fits
K <- ggplot(combined_results, aes(x = k, y = Accuracy, colour = Group)) +
geom_line() +
scale_colour_manual(values = c("Temperature" = "blue", "All Features" = "red", "Best Subset" = "green", "PCA" = "orange", "RFE" = "yellow")) +
labs(title = "Accuracy for Different K Values", subtitle = "for the different KNN fits",colour = "Fit Group") +
theme_minimal()
plot(K)
classifier = rpart(Classes~.,data = uns_trainData, method = "class")
rpart.plot(classifier)
classifier1 = rpart(Classes~Temperature + BUI,data = uns_trainData, method = "class")
rpart.plot(classifier1)
#predicting the test set results
y_pred = predict(classifier,
newdata = uns_testData,
type = 'class')
#generate a confusion matrix
table(uns_testY,y_pred)
#predicting the test set to be outputted as probabilities rather than classes
y_pred = predict(classifier,
newdata = uns_testData,
type = 'prob')
#plotting the ROC curve
roc_curve = suppressMessages(roc(uns_testY, y_pred[,2]))
plot(roc_curve, col = "blue", main = "ROC Curve", print.auc = TRUE)
#set the seed
set.seed(123)
#fit the models
classifier1 = rpart(Classes~Temperature,data = uns_trainData, method = "class")
classifier2 = rpart(Classes~.,data = uns_trainData, method = "class")
classifier3 = rpart(Classes~FWI + DMC + RH + FFMC,data = uns_trainData, method = "class")
classifier4 = rpart(Classes~BUI+DMC+FFMC+DC,data = uns_trainData, method = "class")
classifier5 = rpart(Classes~ISI+FFMC,data = uns_trainData, method = "class")
#predict the values
y_pred1 = predict(classifier1, newdata = uns_testData, type = 'prob')
y_pred2 = predict(classifier2, newdata = uns_testData, type = 'prob')
y_pred3 = predict(classifier3, newdata = uns_testData, type = 'prob')
y_pred4 = predict(classifier4, newdata = uns_testData, type = 'prob')
y_pred5 = predict(classifier5, newdata = uns_testData, type = 'prob')
#compute ROC curves
roc1 = suppressMessages(roc(uns_testY, y_pred1[,2]))
roc2 = suppressMessages(roc(uns_testY, y_pred2[,2]))
roc3 = suppressMessages(roc(uns_testY, y_pred3[,2]))
roc4 = suppressMessages(roc(uns_testY, y_pred4[,2]))
roc5 = suppressMessages(roc(uns_testY, y_pred5[,2]))
#compute aucs
auc1 = auc(roc1)
auc2 = auc(roc2)
auc3 = auc(roc3)
auc4 = auc(roc4)
auc5 = auc(roc5)
#create a dataframe and store AUC to be used in comparison later
auc1.data = data.frame(
Model = "Decision Tree",
Temperature = auc1,
Entire_Dataset = auc2,
Best_Subset = auc3,
PCA = auc4,
RFE = auc5
)
auc.data = rbind(auc.data,auc1.data)
#plot the first ROC curve
plot.roc(roc1, col = "blue", main = "Decision Tree ROC Curves")
#add the rest of the curves as lines
lines.roc(roc2, col = "red", print.auc = TRUE, print.auc.y = 0.4)
lines.roc(roc3, col = "green", print.auc = TRUE, print.auc.y = 0.3)
lines.roc(roc4, col = "orange", print.auc = TRUE, print.auc.y = 0.2)
lines.roc(roc5, col = "yellow", print.auc = TRUE, print.auc.y = 0.1)
legend_labels = c(
paste("Temperature (AUC =", round(auc1, 4), ")"),
paste("All Features (AUC =", round(auc2, 4), ")"),
paste("Best Subset (AUC =", round(auc3, 4), ")"),
paste("PCA (AUC =", round(auc4, 4), ")"),
paste("RFE (AUC =", round(auc5, 4), ")")
)
#legend
legend("bottomright", legend = legend_labels, col = c("blue", "red", "green", "orange", "yellow"), lwd = 0.5, cex = 0.7)
tree_plot = recordPlot()
set.seed(123)
#fit the bagged model
bag = bagging(
formula = Classes ~ .,
data = uns_trainData,
nbagg = 50,
coob = TRUE,
control = rpart.control(minsplit = 2, cp = 0,
min_depth=2)
)
#predicting the test set results
y_pred = predict(bag, uns_testX, type = 'class')
#generate a confusion matrix
table(uns_testY,y_pred$class)
A = suppressWarnings(rpart.plot(bag$trees[[3]], cex = 0.8, box.palette = "auto"))
suppressWarnings(rpart.plot(bag$trees[[5]], cex = 0.8, box.palette = "auto"))
#predicting the test set to be outputted as probabilities rather than classes
y_pred = predict(bag,
uns_testX,
type = 'prob')
#plotting the ROC curve
roc_curve = suppressMessages(roc(uns_testY, y_pred$votes[,2]))
plot(roc_curve, col = "blue", main = "ROC Curve", print.auc = TRUE)
#set the seed
set.seed(123)
#fit the models
bag1 = bagging(formula = Classes ~ Temperature, data = trainData, nbagg = 50,    coob = TRUE, control = rpart.control(minsplit = 2, cp = 0, min_depth=2))
bag2 = bagging(formula = Classes ~ ., data = trainData, nbagg = 50,    coob = TRUE, control = rpart.control(minsplit = 2, cp = 0, min_depth=2))
bag3 = bagging(formula = Classes ~ FWI + DMC + RH + FFMC, data = trainData, nbagg = 50,    coob = TRUE, control = rpart.control(minsplit = 2, cp = 0, min_depth=2))
bag4 = bagging(formula = Classes ~ BUI+DMC+FFMC+DC, data = trainData, nbagg = 50,    coob = TRUE, control = rpart.control(minsplit = 2, cp = 0, min_depth=2))
bag5 = bagging(formula = Classes ~ ISI+FFMC, data = trainData, nbagg = 50,    coob = TRUE, control = rpart.control(minsplit = 2, cp = 0, min_depth=2))
#predict the values
y_pred1 = predict(bag1, testData, type = 'prob')
y_pred2 = predict(bag2, testData, type = 'prob')
y_pred3 = predict(bag3, testData, type = 'prob')
y_pred4 = predict(bag4, testData, type = 'prob')
y_pred5 = predict(bag5, testData, type = 'prob')
#compute ROC curves
roc1 = suppressMessages(roc(testY, y_pred1$votes[,2]))
roc2 = suppressMessages(roc(testY, y_pred2$votes[,2]))
roc3 = suppressMessages(roc(testY, y_pred3$votes[,2]))
roc4 = suppressMessages(roc(testY, y_pred4$votes[,2]))
roc5 = suppressMessages(roc(testY, y_pred5$votes[,2]))
#compute aucs
auc1 = auc(roc1)
auc2 = auc(roc2)
auc3 = auc(roc3)
auc4 = auc(roc4)
auc5 = auc(roc5)
#create a dataframe and store AUC to be used in comparison later
auc1.data = data.frame(
Model = "Bagged Decision Tree",
Temperature = auc1,
Entire_Dataset = auc2,
Best_Subset = auc3,
PCA = auc4,
RFE = auc5
)
auc.data = rbind(auc.data,auc1.data)
#plot the first ROC curve
plot.roc(roc1, col = "blue", main = "Bagged Decision Tree ROC Curves")
#add the rest of the curves as lines
lines.roc(roc2, col = "red", print.auc = TRUE, print.auc.y = 0.4)
lines.roc(roc3, col = "green", print.auc = TRUE, print.auc.y = 0.3)
lines.roc(roc4, col = "orange", print.auc = TRUE, print.auc.y = 0.2)
lines.roc(roc5, col = "yellow", print.auc = TRUE, print.auc.y = 0.1)
legend_labels = c(
paste("Temperature (AUC =", round(auc1, 4), ")"),
paste("All Features (AUC =", round(auc2, 4), ")"),
paste("Best Subset (AUC =", round(auc3, 4), ")"),
paste("PCA (AUC =", round(auc4, 4), ")"),
paste("RFE (AUC =", round(auc5, 4), ")")
)
#legend
legend("bottomright", legend = legend_labels, col = c("blue", "red", "green", "orange", "yellow"), lwd = 0.5, cex = 0.7)
bag_plot = recordPlot()
forest = randomForest(Classes~., data = uns_trainData, ntree = 500)
y_pred = predict(forest,uns_testX)
table(uns_testY, y_pred)
#set the seed
set.seed(123)
#fit the models
forest1 = randomForest(Classes~Temperature, data = uns_trainData, ntree = 500)
forest2 = randomForest(Classes~., data = uns_trainData, ntree = 500)
forest3 = randomForest(Classes~RH+DMC+FFMC+FWI, data = uns_trainData, ntree = 500)
forest4 = randomForest(Classes~BUI+FFMC+DMC+DC, data = uns_trainData, ntree = 500)
forest5 = randomForest(Classes~ISI+FFMC, data = uns_trainData, ntree = 500)
#predict the values
y_pred1 = predict(forest1, newdata = uns_testData, type = 'prob')
y_pred2 = predict(forest2, newdata = uns_testData, type = 'prob')
y_pred3 = predict(forest3, newdata = uns_testData, type = 'prob')
y_pred4 = predict(forest4, newdata = uns_testData, type = 'prob')
y_pred5 = predict(forest5, newdata = uns_testData, type = 'prob')
#compute ROC curves
roc1 = suppressMessages(roc(uns_testY, y_pred1[,2]))
roc2 = suppressMessages(roc(uns_testY, y_pred2[,2]))
roc3 = suppressMessages(roc(uns_testY, y_pred3[,2]))
roc4 = suppressMessages(roc(uns_testY, y_pred4[,2]))
roc5 = suppressMessages(roc(uns_testY, y_pred5[,2]))
#compute aucs
auc1 = auc(roc1)
auc2 = auc(roc2)
auc3 = auc(roc3)
auc4 = auc(roc4)
auc5 = auc(roc5)
#create a dataframe and store AUC to be used in comparison later
auc1.data = data.frame(
Model = "Random Forest",
Temperature = auc1,
Entire_Dataset = auc2,
Best_Subset = auc3,
PCA = auc4,
RFE = auc5
)
auc.data = rbind(auc.data,auc1.data)
#plot the first ROC curve
plot.roc(roc1, col = "blue", main = "Random Forest ROC Curves")
#add the rest of the curves as lines
lines.roc(roc2, col = "red", print.auc = TRUE, print.auc.y = 0.4)
lines.roc(roc3, col = "green", print.auc = TRUE, print.auc.y = 0.3)
lines.roc(roc4, col = "orange", print.auc = TRUE, print.auc.y = 0.2)
lines.roc(roc5, col = "yellow", print.auc = TRUE, print.auc.y = 0.1)
legend_labels = c(
paste("Temperature (AUC =", round(auc1, 4), ")"),
paste("All Features (AUC =", round(auc2, 4), ")"),
paste("Best Subset (AUC =", round(auc3, 4), ")"),
paste("PCA (AUC =", round(auc4, 4), ")"),
paste("RFE (AUC =", round(auc5, 4), ")")
)
#legend
legend("bottomright", legend = legend_labels, col = c("blue", "red", "green", "orange", "yellow"), lwd = 0.5, cex = 0.7)
rf_plot = recordPlot()
set.seed(123)
model = boosting(Classes ~ ., data = uns_trainData, boos = TRUE, mfinal = 100, control = rpart.control(cp = 0, minsplit = 2))
# Make predictions on the test set
predictions = predict(model, uns_testX)
# Calculate the confusion matrix
table(uns_testY,predictions$class)
#set the seed
set.seed(123)
#fit the models
boost1 = boosting(Classes ~ Temperature, data = uns_trainData, boos = TRUE, mfinal = 100, control = rpart.control(cp = 0.01, minsplit = 2))
boost2 = boosting(Classes ~ ., data = uns_trainData, boos = TRUE, mfinal = 100, control = rpart.control(cp = 0.01, minsplit = 2))
boost3 = boosting(Classes ~ FWI + DMC + FFMC + RH, data = uns_trainData, boos = TRUE, mfinal = 100, control = rpart.control(cp = 0.01, minsplit = 2))
boost4 = boosting(Classes ~ BUI + FFMC + DMC + DC, data = uns_trainData, boos = TRUE, mfinal = 100, control = rpart.control(cp = 0.01, minsplit = 2))
boost5 = boosting(Classes ~ ISI + FFMC, data = uns_trainData, boos = TRUE, mfinal = 100, control = rpart.control(cp = 0.01, minsplit = 2))
#predict the values
y_pred1 = predict(boost1, newdata = uns_testData, type = 'prob')
y_pred2 = predict(boost2, newdata = uns_testData, type = 'prob')
y_pred3 = predict(boost3, newdata = uns_testData, type = 'prob')
y_pred4 = predict(boost4, newdata = uns_testData, type = 'prob')
y_pred5 = predict(boost5, newdata = uns_testData, type = 'prob')
#compute ROC curves
roc1 = suppressMessages(roc(uns_testY, y_pred1$prob[,2]))
roc2 = suppressMessages(roc(uns_testY, y_pred2$prob[,2]))
roc3 = suppressMessages(roc(uns_testY, y_pred3$prob[,2]))
roc4 = suppressMessages(roc(uns_testY, y_pred4$prob[,2]))
roc5 = suppressMessages(roc(uns_testY, y_pred5$prob[,2]))
#compute aucs
auc1 = auc(roc1)
auc2 = auc(roc2)
auc3 = auc(roc3)
auc4 = auc(roc4)
auc5 = auc(roc5)
#create a dataframe and store AUC to be used in comparison later
auc1.data = data.frame(
Model = "boosted decision tree",
Temperature = auc1,
Entire_Dataset = auc2,
Best_Subset = auc3,
PCA = auc4,
RFE = auc5
)
auc.data = rbind(auc.data,auc1.data)
#plot the first ROC curve
plot.roc(roc1, col = "blue", main = "Boosting Decision Tree ROC Curves")
#add the rest of the curves as lines
lines.roc(roc2, col = "red", print.auc = TRUE, print.auc.y = 0.4)
lines.roc(roc3, col = "green", print.auc = TRUE, print.auc.y = 0.3)
lines.roc(roc4, col = "orange", print.auc = TRUE, print.auc.y = 0.2)
lines.roc(roc5, col = "yellow", print.auc = TRUE, print.auc.y = 0.1)
legend_labels = c(
paste("Temperature (AUC =", round(auc1, 4), ")"),
paste("All Features (AUC =", round(auc2, 4), ")"),
paste("Best Subset (AUC =", round(auc3, 4), ")"),
paste("PCA (AUC =", round(auc4, 4), ")"),
paste("RFE (AUC =", round(auc5, 4), ")")
)
#legend
legend("bottomright", legend = legend_labels, col = c("blue", "red", "green", "orange", "yellow"), lwd = 0.5, cex = 0.7)
boost_plot = recordPlot()
levels(trainData$Classes) = make.names(levels(trainData$Classes))
svmfit = svm(Classes ~ ISI + FFMC, data = trainData, kernel = "linear")
plot(svmfit, cbind(trainData[5],trainData[8],trainData[11]))
svmfit = svm(Classes ~ ., data = trainData, kernel = "linear", probability = TRUE)
svm_pred = predict(svmfit,testX, probability = TRUE)
table(svm_pred,testY)
tune.fit = tune.svm(Classes ~ ., data = trainData, type = "C-classification", kernel = "linear", cost = 10^(-1:2))
tune.fit$best.model
#set the seed
set.seed(123)
#fit the models
svmfit1 = svm(Classes ~ Temperature, data = trainData, kernel = "linear", cost = 1, probability = TRUE)
svmfit2 = svm(Classes ~ ., data = trainData, kernel = "linear", cost = 1, probability = TRUE)
svmfit3 = svm(Classes ~ FWI + FFMC + DMC + RH, data = trainData, kernel = "linear", cost = 1, probability = TRUE)
svmfit4 = svm(Classes ~ BUI + FFMC + DMC + DC, data = trainData, kernel = "linear", cost = 1, probability = TRUE)
svmfit5 = svm(Classes ~ ISI + FFMC, data = trainData, kernel = "linear", cost = 1, probability = TRUE)
#predict the values
y_pred1 = predict(svmfit1, testX, type = "prob", probability = TRUE)
y_pred2 = predict(svmfit2, testX, type = 'prob', probability = TRUE)
y_pred3 = predict(svmfit3, testX, type = 'prob', probability = TRUE)
y_pred4 = predict(svmfit4, testX, type = 'prob', probability = TRUE)
y_pred5 = predict(svmfit5, testX, type = 'prob', probability = TRUE)
#compute ROC curves
roc1 = suppressMessages(roc(testY, attr(y_pred1, "probabilities")[,2]))
roc2 = suppressMessages(roc(testY, attr(y_pred2, "probabilities")[,2]))
roc3 = suppressMessages(roc(testY, attr(y_pred3, "probabilities")[,2]))
roc4 = suppressMessages(roc(testY, attr(y_pred4, "probabilities")[,2]))
roc5 = suppressMessages(roc(testY, attr(y_pred5, "probabilities")[,2]))
#compute aucs
auc1 = auc(roc1)
auc2 = auc(roc2)
auc3 = auc(roc3)
auc4 = auc(roc4)
auc5 = auc(roc5)
#create a dataframe and store AUC to be used in comparison later
auc1.data = data.frame(
Model = "SVM (Linear Kernel)",
Temperature = auc1,
Entire_Dataset = auc2,
Best_Subset = auc3,
PCA = auc4,
RFE = auc5
)
auc.data = rbind(auc.data,auc1.data)
#plot the first ROC curve
plot.roc(roc1, col = "blue", main = "SVM Linear Kernel ROC Curves")
#add the rest of the curves as lines
lines.roc(roc2, col = "red", print.auc = TRUE, print.auc.y = 0.4)
lines.roc(roc3, col = "green", print.auc = TRUE, print.auc.y = 0.3)
lines.roc(roc4, col = "orange", print.auc = TRUE, print.auc.y = 0.2)
lines.roc(roc5, col = "yellow", print.auc = TRUE, print.auc.y = 0.1)
legend_labels = c(
paste("Temperature (AUC =", round(auc1, 4), ")"),
paste("All Features (AUC =", round(auc2, 4), ")"),
paste("Best Subset (AUC =", round(auc3, 4), ")"),
paste("PCA (AUC =", round(auc4, 4), ")"),
paste("RFE (AUC =", round(auc5, 4), ")")
)
#legend
legend("bottomright", legend = legend_labels, col = c("blue", "red", "green", "orange", "yellow"), lwd = 0.5, cex = 0.7)
svm_lin = recordPlot()
svmfit = svm(Classes ~ ., data = trainData, kernel = "polynomial", degree = 2, probability = TRUE)
svm_pred = predict(svmfit,testX)
table(svm_pred,testY)
tune.fit = tune.svm(Classes ~ ., data = uns_trainData, type = "C-classification", kernel = "polynomial", degree = 2, cost = 10^(-1:2), gamma = c(0.1,1,10), coef0 = c(0.1,1,10))
tune.fit$best.parameters$cost
tune.fit$best.parameters$gamma
tune.fit$best.parameters$coef0
svmfit = svm(Classes ~ ., data = trainData, kernel = "polynomial", gamma = 0.1, degree = 2, cost = 10, coef0 = 10, probability = TRUE)
svm_pred = predict(svmfit,testX)
table(svm_pred,testY)
#set the seed
set.seed(123)
#fit the models
svmfit1 = svm(Classes ~ Temperature, data = trainData, kernel = "polynomial", gamma = 0.1, degree = 2, cost = 10, coef0 = 10, probability = TRUE)
svmfit2 = svm(Classes ~ ., data = trainData, kernel = "polynomial", gamma = 0.1, degree = 2, cost = 10, coef0 = 10, probability = TRUE)
svmfit3 = svm(Classes ~ RH + FFMC + DMC + FWI, data = trainData, kernel = "polynomial", gamma = 0.1, degree = 2, cost = 10, coef0 = 10, probability = TRUE)
svmfit4 = svm(Classes ~ BUI + FFMC + DMC + DC, data = trainData, kernel = "polynomial", gamma = 0.1, degree = 2, cost = 10, coef0 = 10, probability = TRUE)
svmfit5 = svm(Classes ~ ISI + FFMC, data = trainData, kernel = "polynomial", gamma = 0.1, degree = 2, cost = 10, coef0 = 10, probability = TRUE)
#predict the values
y_pred1 = predict(svmfit1, testX, type = "prob", probability = TRUE)
y_pred2 = predict(svmfit2, testX, type = 'prob', probability = TRUE)
y_pred3 = predict(svmfit3, testX, type = 'prob', probability = TRUE)
y_pred4 = predict(svmfit4, testX, type = 'prob', probability = TRUE)
y_pred5 = predict(svmfit5, testX, type = 'prob', probability = TRUE)
#compute ROC curves
roc1 = suppressMessages(roc(testY, attr(y_pred1, "probabilities")[,2]))
roc2 = suppressMessages(roc(testY, attr(y_pred2, "probabilities")[,2]))
roc3 = suppressMessages(roc(testY, attr(y_pred3, "probabilities")[,2]))
roc4 = suppressMessages(roc(testY, attr(y_pred4, "probabilities")[,2]))
roc5 = suppressMessages(roc(testY, attr(y_pred5, "probabilities")[,2]))
#compute aucs
auc1 = auc(roc1)
auc2 = auc(roc2)
auc3 = auc(roc3)
auc4 = auc(roc4)
auc5 = auc(roc5)
#create a dataframe and store AUC to be used in comparison later
auc1.data = data.frame(
Model = "SVM (Quadratic Kernel)",
Temperature = auc1,
Entire_Dataset = auc2,
Best_Subset = auc3,
PCA = auc4,
RFE = auc5
)
auc.data = rbind(auc.data,auc1.data)
#plot the first ROC curve
plot.roc(roc1, col = "blue", main = "SVM Polynomial Kernel ROC Curves")
#add the rest of the curves as lines
lines.roc(roc2, col = "red")
lines.roc(roc3, col = "green")
lines.roc(roc4, col = "orange")
lines.roc(roc5, col = "yellow")
legend_labels = c(
paste("Temperature (AUC =", round(auc1, 4), ")"),
paste("All Features (AUC =", round(auc2, 4), ")"),
paste("Best Subset (AUC =", round(auc3, 4), ")"),
paste("PCA (AUC =", round(auc4, 4), ")"),
paste("RFE (AUC =", round(auc5, 4), ")")
)
#legend
legend("bottomright", legend = legend_labels, col = c("blue", "red", "green", "orange", "yellow"), lwd = 0.5, cex = 0.7)
svm_poly = recordPlot()
plot_grid(lr_plot)
plot_grid(lda_plot)
plot_grid(qda_plot)
plot_grid(knn_plot)
plot_grid(tree_plot)
plot_grid(bag_plot)
plot_grid(rf_plot)
plot_grid(boost_plot)
plot_grid(svm_lin)
plot_grid(svm_poly)
auc.data
auc.data[, -1] <- sapply(auc.data[, -1], as.numeric)
df_long = pivot_longer(auc.data, cols = -Model, names_to = "Feature_Set", values_to = "AUC")
ggplot(df_long, aes(x = Model, y = AUC, fill = Feature_Set)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Model AUC Across Different Feature Sets",
x = "Model",
y = "AUC") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")
